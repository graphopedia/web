{"version":3,"sources":["webpack:///./src/templates/tagPage.js","webpack:///./src/templates/tagPage.module.css"],"names":["TagPage","props","text","_props$pageContext","pageContext","tagsFmtKey","tagName","tag","data","theTag","posts","getPostsFromGraphQL","undefined","description","tagIconFname","_kebabCase","React","createElement","Layout","type","MetaTags","title","charAt","toUpperCase","slice","className","styles","function","headline","breadcrumb","Link","to","tagIcon","src","_capitalize","questionAnswered","id","divider","ChartsList","isExpanded","module","exports"],"mappings":"uPA4DeA,UAjDf,SAAiBC,GACf,IAMqBC,EANrBC,EAAqCF,EAAMG,YAAnCC,EAAUF,EAAVE,WAAYC,EAAOH,EAAPG,QAASC,EAAGJ,EAAHI,IACtBC,EAAQP,EAARO,KAEDC,EAASD,EADWH,EAAU,QAE9BK,EAAQC,YAAoBH,GAAM,OAAMI,EAAWP,GACnDQ,EAAcJ,EAASA,EAAOI,YAAc,GAE5CC,EAAY,SAAYC,IAAYT,GAAQ,KAAKS,IAAYR,GAAI,OACvE,OACES,IAAAC,cAACC,IAAM,CAACC,KAAK,QACXH,IAAAC,cAACG,IAAQ,CACPC,MAAK,KALUnB,EAKSK,EALDL,EAAKoB,OAAO,GAAGC,cAAgBrB,EAAKsB,MAAM,GAKrC,2BAC5BX,YAAaA,IAEfG,IAAAC,cAAA,OAAKQ,UAAWC,IAAOC,UACrBX,IAAAC,cAAA,OAAKQ,UAAWC,IAAOE,UACrBZ,IAAAC,cAAA,WACED,IAAAC,cAAA,OAAKQ,UAAWC,IAAOG,YACrBb,IAAAC,cAACa,OAAI,CAACC,GAAI,IAAMhB,IAAYT,GAAUe,MAAK,YAAcf,GAAYA,IAEvEU,IAAAC,cAAA,UACED,IAAAC,cAAA,OAAKQ,UAAWC,IAAOM,QAASC,IAAKnB,IAAgB,IAAEoB,IAAa3B,KAxB5D,qBA2BTD,EACEU,IAAAC,cAAA,WACCD,IAAAC,cAAA,KAAGQ,UAAWC,IAAOb,aAAcJ,EAAO0B,kBAC1CnB,IAAAC,cAAA,KAAGmB,GAAG,qBAAoB,IAAEvB,EAAY,MAI1CG,IAAAC,cAAA,KAAGQ,UAAWC,IAAOb,aAClBA,IAMTG,IAAAC,cAAA,OAAKmB,GAAG,mBACNpB,IAAAC,cAAA,KAAGQ,UAAWC,IAAOW,SAAS,mBAC9BrB,IAAAC,cAACqB,IAAU,CAACC,YAAY,EAAM7B,MAAOA,S,qBCnD/C8B,EAAOC,QAAU,CAAC,SAAW,kCAAkC,SAAW,kCAAkC,WAAa,oCAAoC,YAAc,qCAAqC,QAAU,iCAAiC,QAAU","file":"component---src-templates-tag-page-js-072e62ed5789d7454327.js","sourcesContent":["import React from \"react\";\nimport { Link, graphql } from \"gatsby\";\nimport Layout from \"../components/Layout/index\";\nimport MetaTags from \"../components/MetaTags/index\";\nimport styles from \"./tagPage.module.css\";\nimport { getPostsFromGraphQL } from \"../utils\";\nimport { ChartsList } from \"../components\";\nimport _ from \"lodash\";\n\nconst INFO_TYPE_TAG = 'information type';\n\nfunction TagPage(props) {\n  const { tagsFmtKey, tagName, tag } = props.pageContext;\n  const {data} = props;\n  const tagsFmtKeyYaml = `${tagsFmtKey}Yaml`;\n  const theTag = data[tagsFmtKeyYaml];\n  const posts = getPostsFromGraphQL(data, true, undefined, tagsFmtKey); // now all charts with variations are showing, maybe add more/less switch to each function\n  const description = theTag ? theTag.description : \"\";\n  const capitalizeFL = text => text.charAt(0).toUpperCase() + text.slice(1); //capitalize first letter\n  const tagIconFname = `/tags/${_.kebabCase(tagName)}s/${_.kebabCase(tag)}.svg`;\n  return (\n    <Layout type=\"full\">\n      <MetaTags\n        title={` ${capitalizeFL(tag)} function - Graphopedia`}\n        description={description}\n      />\n      <div className={styles.function}>\n        <div className={styles.headline}>\n          <div>\n            <div className={styles.breadcrumb}> \n              <Link to={\"/\" + _.kebabCase(tagName)} title={`view all ${tagName}`}>{tagName}</Link> \n            </div>\n            <h1>\n              <img className={styles.tagIcon} src={tagIconFname} /> {_.capitalize(tag)}\n            </h1>\n          </div>\n          { (tagName === INFO_TYPE_TAG)\n            ? (<div>\n                <p className={styles.description}>{theTag.questionAnswered}</p>\n                <p id=\"extra-description\"> {description} </p>\n               </div>\n            )\n            : (\n              <p className={styles.description}>\n                {description}\n              </p>\n            )\n          }\n        </div>\n\n        <div id=\"function_charts\">\n          <p className={styles.divider}>Charts Included</p>\n          <ChartsList isExpanded={true} posts={posts} />\n        </div>\n      </div>\n    </Layout>\n  );\n}\n\n\nexport default TagPage;\n\n// TODO: reuse fragments of GraphQL\n// the query fragments allMarkdownRemark and xxxYaml are repeated for every tag, couldn't find how to reuse it,\n// because GraphQl doesn't support dynamic fields through variables\nexport const query = graphql`\nquery TagsQuery($tag: String!, $incFunction: Boolean!, $incVisPrinciple: Boolean!, $incAxis: Boolean!, $incInfo: Boolean!, $tagId: String) {\n  functions: allMarkdownRemark(limit: 2000, sort: {order: ASC, fields: [fileAbsolutePath]}, filter: {frontmatter: {functions: {eq: $tag}}}) @include(if: $incFunction) {\n    edges {\n      node {\n        fields {\n          slug\n          variationOf\n        }\n        excerpt(pruneLength: 250)\n        frontmatter {\n          title\n        }\n      }\n    }\n  }\n  axisDirections: allMarkdownRemark(limit: 2000, sort: {order: ASC, fields: [fileAbsolutePath]}, filter: {frontmatter: {visualizationTechniques: {elemMatch: {axisDirection: {in: [$tag]}}}}}) @include(if: $incAxis) {\n    edges {\n      node {\n        fields {\n          slug\n          variationOf\n        }\n        excerpt(pruneLength: 250)\n        frontmatter {\n          title\n        }\n      }\n    }\n  }\n  visualizationTechniques: allMarkdownRemark(limit: 2000, sort: {order: ASC, fields: [fileAbsolutePath]}, filter: {frontmatter: {visualizationTechniques: {elemMatch: {techniqueId: {in: [$tagId]}}}}}) @include(if: $incVisPrinciple) {\n    edges {\n      node {\n        fields {\n          slug\n          variationOf\n        }\n        excerpt(pruneLength: 250)\n        frontmatter {\n          title\n        }\n      }\n    }\n  }\n  informationTypes: allMarkdownRemark(limit: 2000, sort: {order: ASC, fields: [fileAbsolutePath]}, filter: {frontmatter: {visualizationTechniques: {elemMatch: {informationType: {in: [$tag]}}}}}) @include(if: $incInfo) {\n    edges {\n      node {\n        fields {\n          slug\n          variationOf\n        }\n        excerpt(pruneLength: 250)\n        frontmatter {\n          title\n        }\n      }\n    }\n  }\n  functionsYaml(name: {eq: $tag}) @include(if: $incFunction) {\n    name\n    description\n  }\n  visualizationTechniquesYaml(name: {eq: $tag}) @include(if: $incVisPrinciple) {\n    name\n    description\n  }\n  informationTypesYaml(name: {eq: $tag}) @include(if: $incInfo) {\n    name\n    questionAnswered\n    description\n  }\n  axisDirectionsYaml(name: {eq: $tag}) @include(if: $incAxis) {\n    name\n    description\n  }\n}\n`;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"function\":\"tagPage-module--function--1pMxA\",\"headline\":\"tagPage-module--headline--sjfaR\",\"breadcrumb\":\"tagPage-module--breadcrumb--f3NIu\",\"description\":\"tagPage-module--description--KPqc3\",\"divider\":\"tagPage-module--divider--3QGG0\",\"tagIcon\":\"tagPage-module--tagIcon--1ljr0\"};"],"sourceRoot":""}